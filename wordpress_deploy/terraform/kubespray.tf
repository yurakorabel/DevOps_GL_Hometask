# ---------- KUBESPRAY ----------

# Clones the Kubespray repository and sets up the inventory directory for the Kubernetes cluster.
resource "null_resource" "clone_kubespray_setup" {
  depends_on = [null_resource.ansible_hardening]

  provisioner "local-exec" {
    command = "git clone https://github.com/kubernetes-sigs/kubespray.git; cd kubespray; git checkout release-2.20; cp -rfp inventory/sample inventory/mycluster"
  }
}


# Generates an inventory file for the Kubernetes cluster to be deployed.
resource "local_file" "kubespray_inventory" {
  depends_on = [null_resource.clone_kubespray_setup]

  content = templatefile("${path.module}/tpl/kubespray/inventory.tpl", {
    public_ip = google_compute_instance.cluster.network_interface[0].access_config[0].nat_ip
  })

  filename = "kubespray/inventory/mycluster/inventory.ini"
}


# Generates an addons file for the Kubernetes cluster to be deployed.
resource "local_file" "kubespray_addons" {
  depends_on = [null_resource.clone_kubespray_setup]

  content = templatefile("${path.module}/tpl/kubespray/addons.tpl", {
    private_ip = google_compute_instance.cluster.network_interface[0].network_ip
  })

  filename = "kubespray/inventory/mycluster/group_vars/k8s_cluster/addons.yml"
}


# Generates a Kubernetes cluster file for the Kubernetes cluster to be deployed.
resource "local_file" "kubespray_k8s_cluster" {
  depends_on = [null_resource.clone_kubespray_setup]

  content = templatefile("${path.module}/tpl/kubespray/k8s-cluster.tpl", {})

  filename = "kubespray/inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml"
}


# Executes Kubespray's cluster.yml playbook, which sets up a Kubernetes cluster,
# using the inventory and configuration files generated by the previous resources.
resource "null_resource" "kubespray_cluster_setup" {
  depends_on = [
    local_file.kubespray_inventory,
    local_file.kubespray_addons,
    local_file.kubespray_k8s_cluster
  ]

  provisioner "remote-exec" {
    inline = ["echo 'Wait until SSH is ready'"]
    connection {
      type        = "ssh"
      user        = var.ssh_username
      private_key = file("/home/${var.ssh_username}/.ssh/id_rsa")
      host        = google_compute_instance.cluster.network_interface[0].access_config[0].nat_ip
    }
  }
  provisioner "local-exec" {
    command = "sudo docker run --rm -v $(pwd)/kubespray:/mnt/kubespray -v /home/${var.ssh_username}/.ssh:/pem quay.io/kubespray/kubespray:v2.20.0 sh -c 'date; cd /mnt/kubespray; ansible-playbook -i inventory/mycluster/inventory.ini --private-key /pem/id_rsa -e ansible_user=${var.ssh_username} -b cluster.yml;'"
  }
}
